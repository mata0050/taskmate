{"ast":null,"code":"import { ApolloServer, gql } from 'apollo-server-micro';\nconst typeDefs = gql`\n  enum TaskStatus {\n    active\n    completed\n  }\n\n  type Task {\n    id: Int!\n    title: String!\n    status: TaskStatus!\n  }\n\n  input CreateTaskInput {\n    title: String!\n  }\n\n  input UpdateTaskInput {\n    id: Int!\n    title: String\n    status: TaskStatus\n  }\n\n  type Query {\n    tasks(status: TaskStatus): [Task!]!\n    task(id: Int!): Task\n  }\n\n  type Mutation {\n    createTask(input: CreateTaskInput!): Task\n    updateTask(input: UpdateTaskInput!): Task\n    deleteTask(id: Int!): Task\n  }\n`;\nconst resolvers = {\n  Query: {\n    tasks(parent, arg, context) {\n      return [];\n    },\n\n    task(parent, arg, context) {\n      return null;\n    }\n\n  },\n  Mutation: {\n    createTask(parent, arg, context) {\n      return null;\n    },\n\n    updateTask(parent, arg, context) {\n      return null;\n    },\n\n    deleteTask(parent, arg, context) {\n      return null;\n    }\n\n  }\n};\nconst apolloServer = new ApolloServer({\n  typeDefs,\n  resolvers\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default apolloServer.createHandler({\n  path: '/api/graphql'\n});","map":{"version":3,"names":["ApolloServer","gql","typeDefs","resolvers","Query","tasks","parent","arg","context","task","Mutation","createTask","updateTask","deleteTask","apolloServer","config","api","bodyParser","createHandler","path"],"sources":["/Volumes/MacBook Pro Storage/Websites/next-todo/pages/api/graphql.ts"],"sourcesContent":["import { ApolloServer, gql } from 'apollo-server-micro';\n\nconst typeDefs = gql`\n  enum TaskStatus {\n    active\n    completed\n  }\n\n  type Task {\n    id: Int!\n    title: String!\n    status: TaskStatus!\n  }\n\n  input CreateTaskInput {\n    title: String!\n  }\n\n  input UpdateTaskInput {\n    id: Int!\n    title: String\n    status: TaskStatus\n  }\n\n  type Query {\n    tasks(status: TaskStatus): [Task!]!\n    task(id: Int!): Task\n  }\n\n  type Mutation {\n    createTask(input: CreateTaskInput!): Task\n    updateTask(input: UpdateTaskInput!): Task\n    deleteTask(id: Int!): Task\n  }\n`;\n\nconst resolvers = {\n  Query: {\n    tasks(parent: any, arg: any, context: any) {\n      return [];\n    },\n    task(parent: any, arg: any, context: any) {\n      return null;\n    },\n  },\n  Mutation: {\n    createTask(parent: any, arg: any, context: any) {\n      return null;\n    },\n    updateTask(parent: any, arg: any, context: any) {\n      return null;\n    },\n    deleteTask(parent: any, arg: any, context: any) {\n      return null;\n    },\n  },\n};\n\nconst apolloServer = new ApolloServer({ typeDefs, resolvers });\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\nexport default apolloServer.createHandler({ path: '/api/graphql' });\n"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,GAAvB,QAAkC,qBAAlC;AAEA,MAAMC,QAAQ,GAAGD,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhCA;AAkCA,MAAME,SAAS,GAAG;EAChBC,KAAK,EAAE;IACLC,KAAK,CAACC,MAAD,EAAcC,GAAd,EAAwBC,OAAxB,EAAsC;MACzC,OAAO,EAAP;IACD,CAHI;;IAILC,IAAI,CAACH,MAAD,EAAcC,GAAd,EAAwBC,OAAxB,EAAsC;MACxC,OAAO,IAAP;IACD;;EANI,CADS;EAShBE,QAAQ,EAAE;IACRC,UAAU,CAACL,MAAD,EAAcC,GAAd,EAAwBC,OAAxB,EAAsC;MAC9C,OAAO,IAAP;IACD,CAHO;;IAIRI,UAAU,CAACN,MAAD,EAAcC,GAAd,EAAwBC,OAAxB,EAAsC;MAC9C,OAAO,IAAP;IACD,CANO;;IAORK,UAAU,CAACP,MAAD,EAAcC,GAAd,EAAwBC,OAAxB,EAAsC;MAC9C,OAAO,IAAP;IACD;;EATO;AATM,CAAlB;AAsBA,MAAMM,YAAY,GAAG,IAAId,YAAJ,CAAiB;EAAEE,QAAF;EAAYC;AAAZ,CAAjB,CAArB;AAEA,OAAO,MAAMY,MAAM,GAAG;EACpBC,GAAG,EAAE;IACHC,UAAU,EAAE;EADT;AADe,CAAf;AAMP,eAAeH,YAAY,CAACI,aAAb,CAA2B;EAAEC,IAAI,EAAE;AAAR,CAA3B,CAAf"},"metadata":{},"sourceType":"module"}